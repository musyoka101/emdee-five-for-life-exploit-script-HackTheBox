package com.medium.musyokaian;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigInteger;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Main {

    public static void main(String[] args) {
        int i;
        for (i = 0; i < 10; i++){
            exploiter();
        }
    }
    public static void exploiter() {
        System.out.println("[+] Emdee five HackTheBox Challenge script");
        System.out.println("[+] Exploit author: Musyoka Ian\n");
        Scanner scanner = new Scanner(System.in);
        System.out.print("[+] Please enter the URL to the exploit: ");
        String url_param = scanner.nextLine();
        try {
            URL url= new URL(url_param);
            URLConnection connect = url.openConnection();
            String cookie = connect.getHeaderField("Set-Cookie");
            System.out.println("[+] Connection Successful");
            System.out.println("[+] Cookie grabbed: " + cookie);
            System.out.println("[+] Trying to read the string");
            BufferedReader reader = new BufferedReader(new InputStreamReader(connect.getInputStream()));
            Pattern pattern = Pattern.compile("<h3 align='center'>(.*?)</h3>", Pattern.DOTALL);
            Matcher matcher = pattern.matcher("\\D");
            String line;
            while ((line = reader.readLine()) != null) {
                matcher.reset(line);
                if (matcher.find()){
                    System.out.println("[+] Found the string: " + matcher.group(1));
                    System.out.println("[+] Hashing the string using MD5 Algorithm");
                    try {
                        String plain_text = matcher.group(1);
                        MessageDigest md = MessageDigest.getInstance("MD5");
                        md.update(plain_text.getBytes(StandardCharsets.UTF_8), 0, plain_text.length());
                        String hashed_string = new BigInteger(1, md.digest()).toString(16);
                        System.out.println("[+] Hashing Successful");
                        System.out.println("[+] Hash generated: " + hashed_string);
                        System.out.println("\n[+] Sending the Hash back the the server");
                        String param = "hash=" + hashed_string;
                        byte[] post_data = param.getBytes(StandardCharsets.UTF_8);
                        int postDataLength = post_data.length;
                        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                        conn.setDoOutput(true);
                        conn.setInstanceFollowRedirects(false);
                        conn.setRequestMethod("POST");
                        conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
                        conn.setRequestProperty("charset", "utf-8");
                        conn.setRequestProperty("Cookie" , cookie);
                        conn.setRequestProperty("Content-Length", Integer.toString(postDataLength));
                        conn.setUseCaches(false);
                        try(DataOutputStream dataOutputStream = new DataOutputStream(conn.getOutputStream())) {
                            dataOutputStream.write(post_data);
                        }
                        BufferedReader reader1 = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                        String flag;
                        Pattern pattern1 = Pattern.compile("</h3><p align='center'>(.*?)</p><center", Pattern.DOTALL);
                        Matcher matcher1 = pattern1.matcher("\\D");
                        while ((flag = reader1.readLine()) != null){
                            matcher1.reset(flag);
                            if (matcher1.find()){
                                String flag_retrieved = matcher1.group(1);
                                if (flag_retrieved.equals("Too slow!")){
                                    System.out.println("[-] Got the following reply from the server ==> " + matcher1.group(1));
                                    System.out.println("[-] Sorry i was slow :( wasn't able to retrieve the flag i will try again\n\n\n");
                                }else {
                                    System.out.println("[+] FLAG retrieved!!!\n[+] Flag: " + matcher1.group(1));
                                    System.exit(1);
                                }
                            }
                        }
                    }catch (NoSuchAlgorithmException no) {
                        System.out.println("[+] Failed to encrypt string!!!!\n[-]Exiting now!!!!!" + no.getMessage());
                        System.exit(0);
                    }
                }
            }
        }catch (MalformedURLException error){
            System.out.println("[-] Connection Failure!!!!\n[-] Exiting now!!!!\n" + error.getMessage());
            System.exit(1);
        }catch (IOException e){
            System.out.println(e.getMessage());
        }
    }
}




